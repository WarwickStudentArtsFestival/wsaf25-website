# Workflow to build and push both static and container websites

name: Build, Release and Publish Website

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main', 'production']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  build-container:
    name: 'Build Website'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}

    permissions:
      contents: read

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies
        run: npm ci

      - name: Build website
        run: npm run build
        env:
          NEXTJS_OUTPUT: 'standalone'
          BASE_URL: ${{ vars.BASE_URL }}
          NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${{ vars.NEXT_PUBLIC_GOOGLE_ANALYTICS_ID }}
          WSAF_ASSETS_BASE_URL: ${{ vars.WSAF_ASSETS_BASE_URL }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-container
          include-hidden-files: true
          path: |
            ./.next
            ./public
            Dockerfile

#  build-static:
#    runs-on: ubuntu-latest
#    environment:
#      name: github-pages
#      url: https://wsaf.org.uk
#
#    steps:
#      - name: Checkout branch
#        uses: actions/checkout@v4
#
#      - name: Setup Node
#        uses: actions/setup-node@v4
#        with:
#          node-version: '20'
#          cache: 'npm'
#
#      - name: Setup Pages
#        uses: actions/configure-pages@v5
#        with:
#          # Automatically inject basePath in your Next.js configuration file and disable
#          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
#          #
#          # You may remove this line if you want to manage the configuration yourself.
#          static_site_generator: next
#
#      - name: Restore cache
#        uses: actions/cache@v4
#        with:
#          path: .next/cache
#          # Generate a new cache whenever packages or source files change.
#          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
#          # If source files changed but packages didn't, rebuild from a prior cache.
#          restore-keys: |
#            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
#
#      - name: Install dependencies
#        run: npm ci
#
#      - name: Build website
#        run: npm run build
#        env:
#          NEXTJS_OUTPUT: 'export'
#          BASE_URL: ${{ vars.BASE_URL }}
#          NEXT_PUBLIC_GOOGLE_ANALYTICS_ID: ${{ vars.NEXT_PUBLIC_GOOGLE_ANALYTICS_ID }}
#          WSAF_ASSETS_BASE_URL: ${{ vars.WSAF_ASSETS_BASE_URL }}
#
#      - name: Upload artifact
#        uses: actions/upload-pages-artifact@v3
#        with:
#          path: ./out

  release-container:
    name: 'Package and Release Container'
    needs: build-container
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}

    permissions:
      packages: write

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-container
          path: ./

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract tags and labels for Docker release
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Deployment job
#  deploy-static:
#    environment:
#      name: github-pages
#      url: ${{ steps.deployment.outputs.page_url }}
#    runs-on: ubuntu-latest
#    needs: build-static
#    steps:
#      - name: Deploy to GitHub Pages
#        id: deployment
#        uses: actions/deploy-pages@v4

  deploy-main:
    name: 'Deploy to Dev'
    needs: release-container
    if: github.ref == 'refs/heads/main'

    runs-on: ubuntu-latest
    environment:
      name: main
      url: https://wsaf25-dev.containers.uwcs.co.uk
    steps:
      - name: Trigger Portainer Deployment
        uses: newarifrh/portainer-service-webhook@v1
        with:
          webhook_url: ${{ secrets.PORTAINER_WEBHOOK_URL }}

  deploy-production:
     name: 'Deploy to Production'
     needs: release-container
     runs-on: ubuntu-latest
     if: github.ref == 'refs/heads/production'
     environment:
       name: production
       url: https://wsaf.org.uk

     steps:
       - name: Trigger Portainer Deployment
         uses: newarifrh/portainer-service-webhook@v1
         with:
           webhook_url: ${{ secrets.PORTAINER_WEBHOOK_URL }}
